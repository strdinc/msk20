import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
    LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid
} from 'recharts';

const getWeatherDescription = (code) => {
    if (code === 0) return '–Ø—Å–Ω–æ ‚òÄÔ∏è';
    if (code >= 1 && code <= 3) return '–û–±–ª–∞—á–Ω–æ ‚õÖ';
    if (code === 45 || code === 48) return '–¢—É–º–∞–Ω üå´';
    if (code >= 51 && code <= 57) return '–ú–æ—Ä–æ—Å—å üåß';
    if (code >= 61 && code <= 67) return '–î–æ–∂–¥—å üåß';
    if (code >= 71 && code <= 77) return '–°–Ω–µ–≥ üå®';
    if (code >= 80 && code <= 82) return '–õ–∏–≤–µ–Ω—å üåßüåß';
    if (code >= 85 && code <= 86) return '–°–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏è';
    if (code === 95) return '–ì—Ä–æ–∑–∞ ‚ö°';
    if (code >= 96 && code <= 99) return '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õà';
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};


const WeatherBlock = ({ coords }) => {
    const [current, setCurrent] = useState(null);
    const [hourly, setHourly] = useState([]);
    const [precipNow, setPrecipNow] = useState(null);
    const [error, setError] = useState(null);

    useEffect(() => {
        if (!coords || coords.length !== 2) return;
        const [latitude, longitude] = coords;

        const fetchWeather = async () => {
            try {
                const res = await axios.get('https://api.open-meteo.com/v1/forecast', {
                    params: {
                        latitude,
                        longitude,
                        hourly: 'temperature_2m,precipitation',
                        current_weather: true,
                        timezone: 'auto'
                    }
                });

                const { current_weather, hourly: hourlyData } = res.data;

                // –Ω–∞–π–¥—ë–º –æ—Å–∞–¥–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ current_weather
                const index = hourlyData.time.findIndex(t => t === current_weather.time);
                const precipitation = index !== -1 ? hourlyData.precipitation[index] : null;

                setCurrent(current_weather);
                setPrecipNow(precipitation);

                const today = new Date().toISOString().slice(0, 10);
                const hourlyToday = hourlyData.time
                    .map((t, i) => ({
                        time: t,
                        temp: hourlyData.temperature_2m[i],
                        precip: hourlyData.precipitation[i]
                    }))
                    .filter(h => h.time.startsWith(today));

                setHourly(hourlyToday);
            } catch (e) {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É');
                console.error(e);
            }
        };

        fetchWeather();
    }, [coords?.[0], coords?.[1]]);

    if (error) return <div className="text-red-500">{error}</div>;
    if (!current || hourly.length === 0) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ‚Ä¶</div>;

    return (
        <div className="p-4 bg-white rounded shadow max-w-xl mx-auto">
            <h2 className="text-xl font-semibold mb-3">–°–µ–π—á–∞—Å</h2>
            <p>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{current.temperature}¬∞C</b></p>
            <p>üå§ –°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{getWeatherDescription(current.weathercode)}</b></p>


            <h3 className="text-lg font-semibold mt-4 mb-2">–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º</h3>
            <ResponsiveContainer width="100%" height={250}>
                <LineChart data={hourly.map(h => ({
                    time: h.time.slice(11, 16),
                    temp: h.temp
                }))}>
                    <CartesianGrid stroke="#eee" strokeDasharray="5 5"/>
                    <XAxis dataKey="time" />
                    <YAxis domain={['dataMin - 2', 'dataMax + 2']} />
                    <Tooltip formatter={v => `${v}¬∞C`} />
                    <Line type="monotone" dataKey="temp" stroke="#007bff" dot={false} />
                </LineChart>
            </ResponsiveContainer>
        </div>
    );
};

export default WeatherBlock;
